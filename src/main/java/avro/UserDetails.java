/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8605429658031523259L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserDetails\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"enabled\",\"type\":\"boolean\"},{\"name\":\"accountNonExpired\",\"type\":\"boolean\"},{\"name\":\"credentialsNonExpired\",\"type\":\"boolean\"},{\"name\":\"accountNonLocked\",\"type\":\"boolean\"},{\"name\":\"authorities\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserDetails> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserDetails> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence username;
  private java.lang.CharSequence password;
  private boolean enabled;
  private boolean accountNonExpired;
  private boolean credentialsNonExpired;
  private boolean accountNonLocked;
  private java.util.List<java.lang.CharSequence> authorities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserDetails() {}

  /**
   * All-args constructor.
   * @param username The new value for username
   * @param password The new value for password
   * @param enabled The new value for enabled
   * @param accountNonExpired The new value for accountNonExpired
   * @param credentialsNonExpired The new value for credentialsNonExpired
   * @param accountNonLocked The new value for accountNonLocked
   * @param authorities The new value for authorities
   */
  public UserDetails(java.lang.CharSequence username, java.lang.CharSequence password, java.lang.Boolean enabled, java.lang.Boolean accountNonExpired, java.lang.Boolean credentialsNonExpired, java.lang.Boolean accountNonLocked, java.util.List<java.lang.CharSequence> authorities) {
    this.username = username;
    this.password = password;
    this.enabled = enabled;
    this.accountNonExpired = accountNonExpired;
    this.credentialsNonExpired = credentialsNonExpired;
    this.accountNonLocked = accountNonLocked;
    this.authorities = authorities;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return password;
    case 2: return enabled;
    case 3: return accountNonExpired;
    case 4: return credentialsNonExpired;
    case 5: return accountNonLocked;
    case 6: return authorities;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.CharSequence)value$; break;
    case 1: password = (java.lang.CharSequence)value$; break;
    case 2: enabled = (java.lang.Boolean)value$; break;
    case 3: accountNonExpired = (java.lang.Boolean)value$; break;
    case 4: credentialsNonExpired = (java.lang.Boolean)value$; break;
    case 5: accountNonLocked = (java.lang.Boolean)value$; break;
    case 6: authorities = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'password' field.
   * @return The value of the 'password' field.
   */
  public java.lang.CharSequence getPassword() {
    return password;
  }


  /**
   * Sets the value of the 'password' field.
   * @param value the value to set.
   */
  public void setPassword(java.lang.CharSequence value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'enabled' field.
   * @return The value of the 'enabled' field.
   */
  public boolean getEnabled() {
    return enabled;
  }


  /**
   * Sets the value of the 'enabled' field.
   * @param value the value to set.
   */
  public void setEnabled(boolean value) {
    this.enabled = value;
  }

  /**
   * Gets the value of the 'accountNonExpired' field.
   * @return The value of the 'accountNonExpired' field.
   */
  public boolean getAccountNonExpired() {
    return accountNonExpired;
  }


  /**
   * Sets the value of the 'accountNonExpired' field.
   * @param value the value to set.
   */
  public void setAccountNonExpired(boolean value) {
    this.accountNonExpired = value;
  }

  /**
   * Gets the value of the 'credentialsNonExpired' field.
   * @return The value of the 'credentialsNonExpired' field.
   */
  public boolean getCredentialsNonExpired() {
    return credentialsNonExpired;
  }


  /**
   * Sets the value of the 'credentialsNonExpired' field.
   * @param value the value to set.
   */
  public void setCredentialsNonExpired(boolean value) {
    this.credentialsNonExpired = value;
  }

  /**
   * Gets the value of the 'accountNonLocked' field.
   * @return The value of the 'accountNonLocked' field.
   */
  public boolean getAccountNonLocked() {
    return accountNonLocked;
  }


  /**
   * Sets the value of the 'accountNonLocked' field.
   * @param value the value to set.
   */
  public void setAccountNonLocked(boolean value) {
    this.accountNonLocked = value;
  }

  /**
   * Gets the value of the 'authorities' field.
   * @return The value of the 'authorities' field.
   */
  public java.util.List<java.lang.CharSequence> getAuthorities() {
    return authorities;
  }


  /**
   * Sets the value of the 'authorities' field.
   * @param value the value to set.
   */
  public void setAuthorities(java.util.List<java.lang.CharSequence> value) {
    this.authorities = value;
  }

  /**
   * Creates a new UserDetails RecordBuilder.
   * @return A new UserDetails RecordBuilder
   */
  public static avro.UserDetails.Builder newBuilder() {
    return new avro.UserDetails.Builder();
  }

  /**
   * Creates a new UserDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserDetails RecordBuilder
   */
  public static avro.UserDetails.Builder newBuilder(avro.UserDetails.Builder other) {
    if (other == null) {
      return new avro.UserDetails.Builder();
    } else {
      return new avro.UserDetails.Builder(other);
    }
  }

  /**
   * Creates a new UserDetails RecordBuilder by copying an existing UserDetails instance.
   * @param other The existing instance to copy.
   * @return A new UserDetails RecordBuilder
   */
  public static avro.UserDetails.Builder newBuilder(avro.UserDetails other) {
    if (other == null) {
      return new avro.UserDetails.Builder();
    } else {
      return new avro.UserDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserDetails>
    implements org.apache.avro.data.RecordBuilder<UserDetails> {

    private java.lang.CharSequence username;
    private java.lang.CharSequence password;
    private boolean enabled;
    private boolean accountNonExpired;
    private boolean credentialsNonExpired;
    private boolean accountNonLocked;
    private java.util.List<java.lang.CharSequence> authorities;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.UserDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.password)) {
        this.password = data().deepCopy(fields()[1].schema(), other.password);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.enabled)) {
        this.enabled = data().deepCopy(fields()[2].schema(), other.enabled);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.accountNonExpired)) {
        this.accountNonExpired = data().deepCopy(fields()[3].schema(), other.accountNonExpired);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.credentialsNonExpired)) {
        this.credentialsNonExpired = data().deepCopy(fields()[4].schema(), other.credentialsNonExpired);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.accountNonLocked)) {
        this.accountNonLocked = data().deepCopy(fields()[5].schema(), other.accountNonLocked);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.authorities)) {
        this.authorities = data().deepCopy(fields()[6].schema(), other.authorities);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing UserDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.UserDetails other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.password)) {
        this.password = data().deepCopy(fields()[1].schema(), other.password);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.enabled)) {
        this.enabled = data().deepCopy(fields()[2].schema(), other.enabled);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountNonExpired)) {
        this.accountNonExpired = data().deepCopy(fields()[3].schema(), other.accountNonExpired);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.credentialsNonExpired)) {
        this.credentialsNonExpired = data().deepCopy(fields()[4].schema(), other.credentialsNonExpired);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.accountNonLocked)) {
        this.accountNonLocked = data().deepCopy(fields()[5].schema(), other.accountNonLocked);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.authorities)) {
        this.authorities = data().deepCopy(fields()[6].schema(), other.authorities);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * @return The value.
      */
    public java.lang.CharSequence getPassword() {
      return password;
    }


    /**
      * Sets the value of the 'password' field.
      * @param value The value of 'password'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setPassword(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.password = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'password' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearPassword() {
      password = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'enabled' field.
      * @return The value.
      */
    public boolean getEnabled() {
      return enabled;
    }


    /**
      * Sets the value of the 'enabled' field.
      * @param value The value of 'enabled'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setEnabled(boolean value) {
      validate(fields()[2], value);
      this.enabled = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'enabled' field has been set.
      * @return True if the 'enabled' field has been set, false otherwise.
      */
    public boolean hasEnabled() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'enabled' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearEnabled() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNonExpired' field.
      * @return The value.
      */
    public boolean getAccountNonExpired() {
      return accountNonExpired;
    }


    /**
      * Sets the value of the 'accountNonExpired' field.
      * @param value The value of 'accountNonExpired'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setAccountNonExpired(boolean value) {
      validate(fields()[3], value);
      this.accountNonExpired = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNonExpired' field has been set.
      * @return True if the 'accountNonExpired' field has been set, false otherwise.
      */
    public boolean hasAccountNonExpired() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'accountNonExpired' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearAccountNonExpired() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'credentialsNonExpired' field.
      * @return The value.
      */
    public boolean getCredentialsNonExpired() {
      return credentialsNonExpired;
    }


    /**
      * Sets the value of the 'credentialsNonExpired' field.
      * @param value The value of 'credentialsNonExpired'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setCredentialsNonExpired(boolean value) {
      validate(fields()[4], value);
      this.credentialsNonExpired = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'credentialsNonExpired' field has been set.
      * @return True if the 'credentialsNonExpired' field has been set, false otherwise.
      */
    public boolean hasCredentialsNonExpired() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'credentialsNonExpired' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearCredentialsNonExpired() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNonLocked' field.
      * @return The value.
      */
    public boolean getAccountNonLocked() {
      return accountNonLocked;
    }


    /**
      * Sets the value of the 'accountNonLocked' field.
      * @param value The value of 'accountNonLocked'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setAccountNonLocked(boolean value) {
      validate(fields()[5], value);
      this.accountNonLocked = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNonLocked' field has been set.
      * @return True if the 'accountNonLocked' field has been set, false otherwise.
      */
    public boolean hasAccountNonLocked() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'accountNonLocked' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearAccountNonLocked() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'authorities' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAuthorities() {
      return authorities;
    }


    /**
      * Sets the value of the 'authorities' field.
      * @param value The value of 'authorities'.
      * @return This builder.
      */
    public avro.UserDetails.Builder setAuthorities(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.authorities = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'authorities' field has been set.
      * @return True if the 'authorities' field has been set, false otherwise.
      */
    public boolean hasAuthorities() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'authorities' field.
      * @return This builder.
      */
    public avro.UserDetails.Builder clearAuthorities() {
      authorities = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserDetails build() {
      try {
        UserDetails record = new UserDetails();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.password = fieldSetFlags()[1] ? this.password : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.enabled = fieldSetFlags()[2] ? this.enabled : (java.lang.Boolean) defaultValue(fields()[2]);
        record.accountNonExpired = fieldSetFlags()[3] ? this.accountNonExpired : (java.lang.Boolean) defaultValue(fields()[3]);
        record.credentialsNonExpired = fieldSetFlags()[4] ? this.credentialsNonExpired : (java.lang.Boolean) defaultValue(fields()[4]);
        record.accountNonLocked = fieldSetFlags()[5] ? this.accountNonLocked : (java.lang.Boolean) defaultValue(fields()[5]);
        record.authorities = fieldSetFlags()[6] ? this.authorities : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserDetails>
    READER$ = (org.apache.avro.io.DatumReader<UserDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.username);

    out.writeString(this.password);

    out.writeBoolean(this.enabled);

    out.writeBoolean(this.accountNonExpired);

    out.writeBoolean(this.credentialsNonExpired);

    out.writeBoolean(this.accountNonLocked);

    long size0 = this.authorities.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.authorities) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);

      this.password = in.readString(this.password instanceof Utf8 ? (Utf8)this.password : null);

      this.enabled = in.readBoolean();

      this.accountNonExpired = in.readBoolean();

      this.credentialsNonExpired = in.readBoolean();

      this.accountNonLocked = in.readBoolean();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.authorities;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("authorities").schema());
        this.authorities = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);
          break;

        case 1:
          this.password = in.readString(this.password instanceof Utf8 ? (Utf8)this.password : null);
          break;

        case 2:
          this.enabled = in.readBoolean();
          break;

        case 3:
          this.accountNonExpired = in.readBoolean();
          break;

        case 4:
          this.credentialsNonExpired = in.readBoolean();
          break;

        case 5:
          this.accountNonLocked = in.readBoolean();
          break;

        case 6:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.authorities;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("authorities").schema());
            this.authorities = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










